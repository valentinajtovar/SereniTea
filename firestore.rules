rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // Rules for 'paciente' collection
    match /paciente/{pacienteId} {
      // Allow read access if the user is the owner of the document.
      allow get: if isSignedIn() && request.auth.uid == pacienteId;

      // Allow a user to create their own document during sign-up.
      // The UID of the creating user must match the document ID.
      allow create: if request.auth.uid == pacienteId;

      // Allow a user to update or delete their own document.
      allow update, delete: if isSignedIn() && request.auth.uid == pacienteId;
      
      // Logged-in users can list patients, but with restrictions.
      // This is a placeholder; refine it based on who should see what.
      allow list: if isSignedIn();
    }

    // Rules for 'journal_entries' collection
    match /journal_entries/{entryId} {
      // A user can create an entry if they are logged in and the entry is for themselves
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // A user can get, update, and delete their own entries
      allow get, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;

      // A user can list entries if they are logged in.
      // IMPORTANT: To keep data secure, your client-side query must filter by userId.
      // For example: collection("journal_entries").where("userId", "==", auth.currentUser.uid)
      allow list: if isSignedIn();
    }

    // Rules for 'tareas' collection
    match /tareas/{tareaId} {
        // A user can create a task for themselves
        allow create: if isSignedIn() && request.resource.data.pacienteId == request.auth.uid;

        // A user can read, update, or delete their own tasks
        allow get, update, delete: if isSignedIn() && resource.data.pacienteId == request.auth.uid;

        // A user can list tasks if they are logged in.
        // IMPORTANT: To keep data secure, your client-side query must filter by pacienteId.
        // For example: collection("tareas").where("pacienteId", "==", auth.currentUser.uid)
        allow list: if isSignedIn();
    }
    
     match /psychologists/{psychologistId} {
      // Public profiles of approved psychologists can be read by anyone.
      // A psychologist can always read their own profile.
      allow get: if (resource.data.approved == true) || (isSignedIn() && request.auth.uid == psychologistId);
      
      // A psychologist can update their own profile.
      allow update: if isSignedIn() && request.auth.uid == psychologistId;

      // Any signed-in user can see the list of psychologists.
      allow list: if isSignedIn();
      
      // Creation happens via a secure server-side action, not directly by clients.
      // Deletion is disallowed for security.
      allow create, delete: if false;
    }
  }
}
rules_version='2'

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // This rule allows anyone with your database reference to view, edit,
      // and delete all data in your database. It is useful for getting
      // started, but it is configured to expire after 30 days because it
      // leaves your app open to attackers. At that time, all client
      // requests to your database will be denied.
      //
      // Make sure to write security rules for your app before that time, or
      // else all client requests to your database will be denied until you
      // update your rules.
      allow read, write: if request.time < timestamp.date(2025, 10, 14);
    }
  }
}
